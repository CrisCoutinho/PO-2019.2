# -*- coding: utf-8 -*-
"""RamboSort.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BqdZItRf57knHTyeAGTznIdIoyBgV79e
"""

#ATIVIDADE DE PESQUISA E ORDENAÇÃO, PROF. RONALDO
#
#INTEGRANTES:
#
#ALYSON NORONHA
#
#CRISTIANO COUTINHO
#
#JOÃO GABRIEL
#

import numpy as np
from random import shuffle, randint
import timeit
import matplotlib as mpl
import matplotlib.pyplot as plt
import sys
import math

mpl.use('Agg')
mpl.rc('lines', linewidth=2.9)
plt.style.use('ggplot')

sys.setrecursionlimit(10**7) 

def rambo(array):
    deads = list()

    i = 1
    while i < len(array) :
        if array[i] < array[i-1]:
            #kill the element i
            deads.append(array[i])
            array.pop(i)
        else:
            i += 1
    
    return array, deads

def merge(array1, array2):
    merged = []
    i, j = 0, 0

    while i < len(array1) and j < len(array2):
        if array1[i] < array2[j]:
            merged.append(array1[i])
            i += 1
        else:
            merged.append(array2[j])
            j += 1
    while i < len(array1):
        merged.append(array1[i])
        i += 1
    while j < len(array2):
        merged.append(array2[j])
        j += 1
    
    return merged

def ramboSort(array):
    lives, deads = rambo(array)

    while len(deads):
        resuscitates, deads = rambo(deads)
        lives = merge(lives, resuscitates)
      
def drawGraph(x,y,yInv,XAxis = "Lista de Numeros", YAxis = "Tempo de ordenação", name =" Tempo de ordenação em seg"):
    fig = plt.figure(figsize=(10, 8))
    ax = fig.add_subplot(111)
    plt.scatter(x,y,marker='^',facecolor='red',edgecolors= 'red', linewidths=4)  
    ax.plot(x,y,color = 'blue', markerfacecoloralt ='green', label = "Aleatorio")
    plt.scatter(x,yInv,marker= 'v',facecolor='blue',edgecolors= 'blue', linewidths=4)  
    ax.plot(x,yInv, color = 'red', label = "Invertida")
    ax.legend(bbox_to_anchor=(1, 1),bbox_transform=plt.gcf().transFigure)
    plt.ylabel(YAxis)
    plt.xlabel(XAxis)
    fig.savefig(name)
    plt.show()

def listInv(tamanho):
  newList =[]
  for i in range(tamanho, 0, -1):
    newList.append(tamanho)
    tamanho = tamanho - 1
  return newList


def generateList(tam):
  newList = list(range(1, tam + 1))
  shuffle(newList)
  return newList

#Casos testados:  1k, 3k, 5k, 10k, 20k

listValueGraph = [1 ,3 ,5 ,10 ,20]
#~~~~~~~~~~ Tests ~~~~~~~~~~~#


value1k = 1000
value3k = 3000
value5k = 5000
value10k = 10000
value20k = 20000

#~~~~~~~~~~ List Inverted Case ~~~~~~~~~~~#

listInvertedCase1k = listInv(value1k)
listInvertedCase3k = listInv(value3k)
listInvertedCase5k = listInv(value5k)
listInvertedCase10k = listInv(value10k)
listInvertedCase20k = listInv(value20k)


listQuestionInvertedCase = [listInvertedCase1k,
                            listInvertedCase3k,
                            listInvertedCase5k,
                            listInvertedCase10k, 
                            listInvertedCase20k]

timeSortInvertedCase = []



#~~~~~~~~~~ Random List Case ~~~~~~~~~~~#

listRandomCase1k = generateList(value1k)
listRandomCase3k = generateList(value3k)
listRandomCase5k = generateList(value5k)
listRandomCase10k = generateList(value10k)
listRandomCase20k = generateList(value20k)



listQuestionRandomCase = [listRandomCase1k,
                          listRandomCase3k,
                          listRandomCase5k,
                          listRandomCase10k,
                          listRandomCase20k] 
timeSortRandomCase = []




for i in range(5):
    timeSortInvertedCase.append(timeit.
                                timeit("ramboSort({})".format(listQuestionInvertedCase[i]),
                                              setup="from __main__ import ramboSort, listInv, generateList",number = 1))
    timeSortRandomCase.append(timeit.
                              timeit("ramboSort({})".format(listQuestionRandomCase[i]),
                                            setup="from __main__ import ramboSort, listInv, generateList",number = 1))
    
    print(i)


drawGraph(listValueGraph,
          timeSortInvertedCase,
          timeSortRandomCase, 
          XAxis="Número de elementos em milhares", 
          YAxis="Tempo de ordenação em Seg",
         name = "Tempo de ordenação em Seg RamboSort")

