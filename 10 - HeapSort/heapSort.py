# -*- coding: utf-8 -*-
"""Heapsort.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nE8Vj3WO7H7b-aUv97dsiD5gMUH4CFRx
"""

import numpy as np
from random import shuffle, randint
import timeit
import matplotlib as mpl
import matplotlib.pyplot as plt
import sys
import math

mpl.use('Agg')
mpl.rc('lines', linewidth=2.9)
plt.style.use('ggplot')

sys.setrecursionlimit(10**7) 






def heapSort(a):  
  
    def swap(a,i,j):  
        tmp = a[i]  
        a[i] = a[j]  
        a[j] = tmp    
          
    def siftdown(a, i, size):  
        l = 2*i+1  
        r = 2*i+2  
        largest = i  
        if l <= size-1 and a[l] > a[i]:  
            largest = l  
        if r <= size-1 and a[r] > a[largest]:  
            largest = r  
        if largest != i:  
            swap(a, i, largest)  
            siftdown(a, largest, size)  
              
    def heapify(a, size):  
        p = (size//2)-1  
        while p>=0:  
            siftdown(a, p, size)  
            p -= 1  
              
    size = len(a)          
    heapify(a, size)  
    end = size-1  
    while(end > 0):  
        swap(a, 0, end)  
        siftdown(a, 0, end)  
        end -= 1
        
        
        
def drawGraph(x,y,yInv,XAxis = "Lista de Numeros", YAxis = "Tempo de ordenação", name =" Tempo de ordenação em seg"):
    fig = plt.figure(figsize=(10, 8))
    ax = fig.add_subplot(111)
    plt.scatter(x,y,marker='^',facecolor='red',edgecolors= 'red', linewidths=4)  
    ax.plot(x,y,color = 'blue', markerfacecoloralt ='green', label = "Aleatorio")
    plt.scatter(x,yInv,marker= 'v',facecolor='blue',edgecolors= 'blue', linewidths=4)  
    ax.plot(x,yInv, color = 'red', label = "Invertida")
    ax.legend(bbox_to_anchor=(1, 1),bbox_transform=plt.gcf().transFigure)
    plt.ylabel(YAxis)
    plt.xlabel(XAxis)
    fig.savefig(name)
    plt.show()

def listInv(tamanho):
  newList =[]
  for i in range(tamanho, 0, -1):
    newList.append(tamanho)
    tamanho = tamanho - 1
  return newList


def generateList(tam):
  newList = list(range(1, tam + 1))
  shuffle(newList)
  return newList

#Casos testados:  100k, 200k, 300k, 400k, 500k, 1M e 2M 

listValueGraph = [100 ,200, 300 , 400, 500, 1000, 2000]
#~~~~~~~~~~ Tests ~~~~~~~~~~~#


value100k = 100000
value200k = 200000
value300k = 300000
value400k = 400000
value500k = 500000
value1M = 1000000
value2M = 2000000

#~~~~~~~~~~ List Inverted Case ~~~~~~~~~~~#

listInvertedCase100k = listInv(value100k)
listInvertedCase200k = listInv(value200k)
listInvertedCase300k = listInv(value300k)
listInvertedCase400k = listInv(value400k)
listInvertedCase500k = listInv(value500k)
listInvertedCase1M = listInv(value1M)
listInvertedCase2M = listInv(value2M)


listQuestionInvertedCase = [listInvertedCase100k,listInvertedCase200k,
                            listInvertedCase300k,listInvertedCase400k,
                            listInvertedCase500k,listInvertedCase1M, 
                            listInvertedCase2M]

timeSortInvertedCase = []



#~~~~~~~~~~ Random List Case ~~~~~~~~~~~#

listRandomCase100k = generateList(value100k)
listRandomCase200k = generateList(value200k)
listRandomCase300k = generateList(value300k)
listRandomCase400k = generateList(value400k)
listRandomCase500k = generateList(value500k)
listRandomCase1M = generateList(value1M)
listRandomCase2M = generateList(value2M)



listQuestionRandomCase = [listRandomCase100k,listRandomCase200k,
                          listRandomCase300k,listRandomCase400k,
                          listRandomCase500k,listRandomCase1M,
                          listRandomCase2M] 
timeSortRandomCase = []




for i in range(7):
    timeSortInvertedCase.append(timeit.
                                timeit("heapSort({})".format(listQuestionInvertedCase[i]),
                                              setup="from __main__ import heapSort, listInv, generateList",number = 1))
    timeSortRandomCase.append(timeit.
                              timeit("heapSort({})".format(listQuestionRandomCase[i]),
                                            setup="from __main__ import heapSort, listInv, generateList",number = 1))
    
    print(i)


drawGraph(listValueGraph,
          timeSortInvertedCase,
          timeSortRandomCase, 
          XAxis="Número de elementos em milhares", 
          YAxis="Tempo de ordenação em Seg",
         name = "Tempo de ordenação em Seg HeapSort")